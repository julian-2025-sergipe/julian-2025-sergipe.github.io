{
  "version": 3,
  "sources": ["../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/utils/passkey/registerPasskey.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createStartWebAuthnRegistrationClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createCompleteWebAuthnRegistrationClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/apis/associateWebAuthnCredential.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createListWebAuthnCredentialsClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/apis/listWebAuthnCredentials.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/apis/listWebAuthnCredentials.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createDeleteWebAuthnCredentialClient.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/foundation/apis/deleteWebAuthnCredential.mjs", "../../../../../../node_modules/@aws-amplify/auth/dist/esm/client/apis/deleteWebAuthnCredential.mjs"],
  "sourcesContent": ["import { assertCredentialIsPkcWithAuthenticatorAttestationResponse } from './types/index.mjs';\nimport { deserializeJsonToPkcCreationOptions, serializePkcWithAttestationToJson } from './serde.mjs';\nimport { assertPasskeyError, PasskeyErrorCode, handlePasskeyRegistrationError } from './errors.mjs';\nimport { getIsPasskeySupported } from './getIsPasskeySupported.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Registers a new passkey for user\n * @param input - PasskeyCreateOptionsJson\n * @returns serialized PasskeyCreateResult\n */\nconst registerPasskey = async input => {\n  try {\n    const isPasskeySupported = getIsPasskeySupported();\n    assertPasskeyError(isPasskeySupported, PasskeyErrorCode.PasskeyNotSupported);\n    const passkeyCreationOptions = deserializeJsonToPkcCreationOptions(input);\n    const credential = await navigator.credentials.create({\n      publicKey: passkeyCreationOptions\n    });\n    assertCredentialIsPkcWithAuthenticatorAttestationResponse(credential);\n    return serializePkcWithAttestationToJson(credential);\n  } catch (err) {\n    throw handlePasskeyRegistrationError(err);\n  }\n};\nexport { registerPasskey };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createStartWebAuthnRegistrationClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('StartWebAuthnRegistration'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createStartWebAuthnRegistrationClient };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createCompleteWebAuthnRegistrationClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('CompleteWebAuthnRegistration'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createCompleteWebAuthnRegistrationClient };\n", "import { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../../providers/cognito/utils/types.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { getRegionFromUserPoolId } from '../../foundation/parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../utils/getAuthUserAgentValue.mjs';\nimport { registerPasskey } from '../utils/passkey/registerPasskey.mjs';\nimport '../utils/passkey/errors.mjs';\nimport { assertValidCredentialCreationOptions } from '../utils/passkey/types/shared.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../common/AuthErrorStrings.mjs';\nimport '../../errors/types/validation.mjs';\nimport '../../providers/cognito/types/errors.mjs';\nimport { createStartWebAuthnRegistrationClient } from '../../foundation/factories/serviceClients/cognitoIdentityProvider/createStartWebAuthnRegistrationClient.mjs';\nimport { createCompleteWebAuthnRegistrationClient } from '../../foundation/factories/serviceClients/cognitoIdentityProvider/createCompleteWebAuthnRegistrationClient.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Registers a new passkey for an authenticated user\n *\n * @returns Promise<void>\n * @throws - {@link PasskeyError}:\n * - Thrown when intermediate state is invalid\n * @throws - {@link AuthError}:\n * - Thrown when user is unauthenticated\n * @throws - {@link StartWebAuthnRegistrationException}\n * - Thrown due to a service error retrieving WebAuthn registration options\n * @throws - {@link CompleteWebAuthnRegistrationException}\n * - Thrown due to a service error when verifying WebAuthn registration result\n */\nasync function associateWebAuthnCredential() {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await fetchAuthSession();\n  assertAuthTokens(tokens);\n  const startWebAuthnRegistration = createStartWebAuthnRegistrationClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    CredentialCreationOptions: credentialCreationOptions\n  } = await startWebAuthnRegistration({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.StartWebAuthnRegistration)\n  }, {\n    AccessToken: tokens.accessToken.toString()\n  });\n  assertValidCredentialCreationOptions(credentialCreationOptions);\n  const cred = await registerPasskey(credentialCreationOptions);\n  const completeWebAuthnRegistration = createCompleteWebAuthnRegistrationClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await completeWebAuthnRegistration({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.CompleteWebAuthnRegistration)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    Credential: cred\n  });\n}\nexport { associateWebAuthnCredential };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createListWebAuthnCredentialsClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('ListWebAuthnCredentials'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createListWebAuthnCredentialsClient };\n", "import { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../../providers/cognito/utils/types.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { getRegionFromUserPoolId } from '../parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../common/AuthErrorStrings.mjs';\nimport '../../errors/types/validation.mjs';\nimport '../../providers/cognito/types/errors.mjs';\nimport { createListWebAuthnCredentialsClient } from '../factories/serviceClients/cognitoIdentityProvider/createListWebAuthnCredentialsClient.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nasync function listWebAuthnCredentials(amplify, input) {\n  const authConfig = amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await amplify.Auth.fetchAuthSession();\n  assertAuthTokens(tokens);\n  const listWebAuthnCredentialsResult = createListWebAuthnCredentialsClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  const {\n    Credentials: commandCredentials = [],\n    NextToken: nextToken\n  } = await listWebAuthnCredentialsResult({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ListWebAuthnCredentials)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    MaxResults: input?.pageSize,\n    NextToken: input?.nextToken\n  });\n  const credentials = commandCredentials.map(item => ({\n    credentialId: item.CredentialId,\n    friendlyCredentialName: item.FriendlyCredentialName,\n    relyingPartyId: item.RelyingPartyId,\n    authenticatorAttachment: item.AuthenticatorAttachment,\n    authenticatorTransports: item.AuthenticatorTransports,\n    createdAt: item.CreatedAt ? new Date(item.CreatedAt * 1000) : undefined\n  }));\n  return {\n    credentials,\n    nextToken\n  };\n}\nexport { listWebAuthnCredentials };\n", "import { Amplify } from '@aws-amplify/core';\nimport { listWebAuthnCredentials as listWebAuthnCredentials$1 } from '../../foundation/apis/listWebAuthnCredentials.mjs';\nimport '@aws-amplify/core/internals/utils';\nimport '../../providers/cognito/utils/types.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../common/AuthErrorStrings.mjs';\nimport '../../errors/types/validation.mjs';\nimport '../../providers/cognito/types/errors.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Lists registered credentials for an authenticated user\n *\n * @param {ListWebAuthnCredentialsInput} input The list input parameters including page size and next token.\n * @returns Promise<ListWebAuthnCredentialsOutput>\n * @throws - {@link AuthError}:\n * - Thrown when user is unauthenticated\n * @throws - {@link ListWebAuthnCredentialsException}\n * - Thrown due to a service error when listing WebAuthn credentials\n */\nasync function listWebAuthnCredentials(input) {\n  return listWebAuthnCredentials$1(Amplify, input);\n}\nexport { listWebAuthnCredentials };\n", "import { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { cognitoUserPoolTransferHandler } from './shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport { createUserPoolSerializer } from './shared/serde/createUserPoolSerializer.mjs';\nimport { createUserPoolDeserializer } from './shared/serde/createUserPoolDeserializer.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/utils';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst createDeleteWebAuthnCredentialClient = config => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('DeleteWebAuthnCredential'), createUserPoolDeserializer(), {\n  ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n  ...config\n});\nexport { createDeleteWebAuthnCredentialClient };\n", "import { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { assertAuthTokens } from '../../providers/cognito/utils/types.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../../providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs';\nimport { getRegionFromUserPoolId } from '../parsers/regionParsers.mjs';\nimport { getAuthUserAgentValue } from '../../utils/getAuthUserAgentValue.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../common/AuthErrorStrings.mjs';\nimport '../../errors/types/validation.mjs';\nimport '../../providers/cognito/types/errors.mjs';\nimport { createDeleteWebAuthnCredentialClient } from '../factories/serviceClients/cognitoIdentityProvider/createDeleteWebAuthnCredentialClient.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nasync function deleteWebAuthnCredential(amplify, input) {\n  const authConfig = amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolEndpoint,\n    userPoolId\n  } = authConfig;\n  const {\n    tokens\n  } = await amplify.Auth.fetchAuthSession();\n  assertAuthTokens(tokens);\n  const deleteWebAuthnCredentialResult = createDeleteWebAuthnCredentialClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await deleteWebAuthnCredentialResult({\n    region: getRegionFromUserPoolId(userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.DeleteWebAuthnCredential)\n  }, {\n    AccessToken: tokens.accessToken.toString(),\n    CredentialId: input.credentialId\n  });\n}\nexport { deleteWebAuthnCredential };\n", "import { Amplify } from '@aws-amplify/core';\nimport '@aws-amplify/core/internals/utils';\nimport '../../providers/cognito/utils/types.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport '../../common/AuthErrorStrings.mjs';\nimport '../../errors/types/validation.mjs';\nimport '../../providers/cognito/types/errors.mjs';\nimport { deleteWebAuthnCredential as deleteWebAuthnCredential$1 } from '../../foundation/apis/deleteWebAuthnCredential.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Delete a registered credential for an authenticated user by credentialId\n * @param {DeleteWebAuthnCredentialInput} input The delete input parameters including the credentialId\n * @returns Promise<void>\n * @throws - {@link AuthError}:\n * - Thrown when user is unauthenticated\n * @throws - {@link DeleteWebAuthnCredentialException}\n * - Thrown due to a service error when deleting a WebAuthn credential\n */\nasync function deleteWebAuthnCredential(input) {\n  return deleteWebAuthnCredential$1(Amplify, input);\n}\nexport { deleteWebAuthnCredential };\n"],
  "mappings": "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",
  "names": ["listWebAuthnCredentials", "deleteWebAuthnCredential"]
}

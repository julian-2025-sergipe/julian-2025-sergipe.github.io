{
  "version": 3,
  "sources": ["../../../../../../node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/index.mjs", "../../../../../../node_modules/aws-amplify/dist/esm/initSingleton.mjs"],
  "sourcesContent": ["import { defaultStorage } from '@aws-amplify/core';\nimport { DefaultIdentityIdStore } from './IdentityIdStore.mjs';\nimport { CognitoAWSCredentialsAndIdentityIdProvider } from './credentialsProvider.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Cognito specific implmentation of the CredentialsProvider interface\n * that manages setting and getting of AWS Credentials.\n *\n * @throws configuration expections: `InvalidIdentityPoolIdException`\n *  - Auth errors that may arise from misconfiguration.\n * @throws service expections: {@link GetCredentialsForIdentityException}, {@link GetIdException}\n *\n */\nconst cognitoCredentialsProvider = new CognitoAWSCredentialsAndIdentityIdProvider(new DefaultIdentityIdStore(defaultStorage));\nexport { CognitoAWSCredentialsAndIdentityIdProvider, DefaultIdentityIdStore, cognitoCredentialsProvider };\n", "import { Amplify, CookieStorage, defaultStorage } from '@aws-amplify/core';\nimport { parseAmplifyConfig } from '@aws-amplify/core/internals/utils';\nimport { CognitoAWSCredentialsAndIdentityIdProvider, DefaultIdentityIdStore, cognitoCredentialsProvider, cognitoUserPoolsTokenProvider } from '@aws-amplify/auth/cognito';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst DefaultAmplify = {\n  /**\n   * Configures Amplify with the {@link resourceConfig} and {@link libraryOptions}.\n   *\n   * @param resourceConfig The {@link ResourcesConfig} object that is typically imported from the\n   * `amplifyconfiguration.json` file. It can also be an object literal created inline when calling `Amplify.configure`.\n   * @param libraryOptions The {@link LibraryOptions} additional options for the library.\n   *\n   * @example\n   * import config from './amplifyconfiguration.json';\n   *\n   * Amplify.configure(config);\n   */\n  configure(resourceConfig, libraryOptions) {\n    const resolvedResourceConfig = parseAmplifyConfig(resourceConfig);\n    const cookieBasedKeyValueStorage = new CookieStorage({\n      sameSite: 'lax'\n    });\n    const resolvedKeyValueStorage = libraryOptions?.ssr ? cookieBasedKeyValueStorage : defaultStorage;\n    const resolvedCredentialsProvider = libraryOptions?.ssr ? new CognitoAWSCredentialsAndIdentityIdProvider(new DefaultIdentityIdStore(cookieBasedKeyValueStorage)) : cognitoCredentialsProvider;\n    // If no Auth config is provided, no special handling will be required, configure as is.\n    // Otherwise, we can assume an Auth config is provided from here on.\n    if (!resolvedResourceConfig.Auth) {\n      Amplify.configure(resolvedResourceConfig, libraryOptions);\n      return;\n    }\n    // If Auth options are provided, always just configure as is.\n    // Otherwise, we can assume no Auth libraryOptions were provided from here on.\n    if (libraryOptions?.Auth) {\n      Amplify.configure(resolvedResourceConfig, libraryOptions);\n      return;\n    }\n    // If no Auth libraryOptions were previously configured, then always add default providers.\n    if (!Amplify.libraryOptions.Auth) {\n      cognitoUserPoolsTokenProvider.setAuthConfig(resolvedResourceConfig.Auth);\n      cognitoUserPoolsTokenProvider.setKeyValueStorage(\n      // TODO: allow configure with a public interface\n      resolvedKeyValueStorage);\n      Amplify.configure(resolvedResourceConfig, {\n        ...libraryOptions,\n        Auth: {\n          tokenProvider: cognitoUserPoolsTokenProvider,\n          credentialsProvider: resolvedCredentialsProvider\n        }\n      });\n      return;\n    }\n    // At this point, Auth libraryOptions would have been previously configured and no overriding\n    // Auth options were given, so we should preserve the currently configured Auth libraryOptions.\n    if (libraryOptions) {\n      const authLibraryOptions = Amplify.libraryOptions.Auth;\n      // If ssr is provided through libraryOptions, we should respect the intentional reconfiguration.\n      if (libraryOptions.ssr !== undefined) {\n        cognitoUserPoolsTokenProvider.setKeyValueStorage(\n        // TODO: allow configure with a public interface\n        resolvedKeyValueStorage);\n        authLibraryOptions.credentialsProvider = resolvedCredentialsProvider;\n      }\n      Amplify.configure(resolvedResourceConfig, {\n        Auth: authLibraryOptions,\n        ...libraryOptions\n      });\n      return;\n    }\n    // Finally, if there were no libraryOptions given at all, we should simply not touch the currently\n    // configured libraryOptions.\n    Amplify.configure(resolvedResourceConfig);\n  },\n  /**\n   * Returns the {@link ResourcesConfig} object passed in as the `resourceConfig` parameter when calling\n   * `Amplify.configure`.\n   *\n   * @returns An {@link ResourcesConfig} object.\n   */\n  getConfig() {\n    return Amplify.getConfig();\n  }\n};\nexport { DefaultAmplify };\n"],
  "mappings": ";;;;;;;;;;;;;;;AAeA,IAAM,6BAA6B,IAAI,2CAA2C,IAAI,uBAAuB,cAAc,CAAC;;;ACT5H,IAAM,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAarB,UAAU,gBAAgB,gBAAgB;AACxC,UAAM,yBAAyB,mBAAmB,cAAc;AAChE,UAAM,6BAA6B,IAAI,cAAc;AAAA,MACnD,UAAU;AAAA,IACZ,CAAC;AACD,UAAM,0BAA0B,gBAAgB,MAAM,6BAA6B;AACnF,UAAM,8BAA8B,gBAAgB,MAAM,IAAI,2CAA2C,IAAI,uBAAuB,0BAA0B,CAAC,IAAI;AAGnK,QAAI,CAAC,uBAAuB,MAAM;AAChC,cAAQ,UAAU,wBAAwB,cAAc;AACxD;AAAA,IACF;AAGA,QAAI,gBAAgB,MAAM;AACxB,cAAQ,UAAU,wBAAwB,cAAc;AACxD;AAAA,IACF;AAEA,QAAI,CAAC,QAAQ,eAAe,MAAM;AAChC,oCAA8B,cAAc,uBAAuB,IAAI;AACvE,oCAA8B;AAAA;AAAA,QAE9B;AAAA,MAAuB;AACvB,cAAQ,UAAU,wBAAwB,iCACrC,iBADqC;AAAA,QAExC,MAAM;AAAA,UACJ,eAAe;AAAA,UACf,qBAAqB;AAAA,QACvB;AAAA,MACF,EAAC;AACD;AAAA,IACF;AAGA,QAAI,gBAAgB;AAClB,YAAM,qBAAqB,QAAQ,eAAe;AAElD,UAAI,eAAe,QAAQ,QAAW;AACpC,sCAA8B;AAAA;AAAA,UAE9B;AAAA,QAAuB;AACvB,2BAAmB,sBAAsB;AAAA,MAC3C;AACA,cAAQ,UAAU,wBAAwB;AAAA,QACxC,MAAM;AAAA,SACH,eACJ;AACD;AAAA,IACF;AAGA,YAAQ,UAAU,sBAAsB;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY;AACV,WAAO,QAAQ,UAAU;AAAA,EAC3B;AACF;",
  "names": []
}
